// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ridewithme.Service.Database;

#nullable disable

namespace ridewithme.Service.Migrations
{
    [DbContext(typeof(RidewithmeContext))]
    [Migration("20250210203436_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ridewithme.Service.Database.Dogadjaji", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumPocetka")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dogadjaji");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Dostignuca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dostignuca", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Prva vožnja",
                            Opis = "Završio si svoju prvu vožnju! Dobrodošao u zajednicu!"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Desetka!",
                            Opis = "Odradio si 10 vožnji! Postaješ pravi profesionalac!"
                        },
                        new
                        {
                            Id = 3,
                            Naziv = "Carpool majstor",
                            Opis = "50 vožnji! Već si legenda na putu!"
                        },
                        new
                        {
                            Id = 4,
                            Naziv = "Legenda na cesti",
                            Opis = "100 vožnji! Tvoj auto sada zna put napamet!"
                        },
                        new
                        {
                            Id = 5,
                            Naziv = "Putni veteran",
                            Opis = "500 vožnji! Obišao si pola zemlje!"
                        },
                        new
                        {
                            Id = 6,
                            Naziv = "Putevi su moj dom",
                            Opis = "1000 vožnji! Jesi li siguran da ne živiš u autu?"
                        },
                        new
                        {
                            Id = 7,
                            Naziv = "Pet zvjezdica, molim!",
                            Opis = "5/5 ocjena! Samo rijetki uspiju ovako!"
                        },
                        new
                        {
                            Id = 8,
                            Naziv = "Noćna ptica",
                            Opis = "Vozio si se najmanje 10 puta između ponoći i 5 ujutro!"
                        },
                        new
                        {
                            Id = 9,
                            Naziv = "Pustolov na putu",
                            Opis = "Vozio si se u 10 različitih gradova! Avantura te zove!"
                        },
                        new
                        {
                            Id = 10,
                            Naziv = "ridewithme beba",
                            Opis = "Godinu dana na platformi! Početak sjajne priče!"
                        },
                        new
                        {
                            Id = 11,
                            Naziv = "ridewithme pro",
                            Opis = "5 godina vožnji! Pravi si veteran zajednice!"
                        },
                        new
                        {
                            Id = 12,
                            Naziv = "Nestali saputnik",
                            Opis = "Otkazao si vožnju u zadnji čas! Sljedeći put dolaziš?"
                        },
                        new
                        {
                            Id = 13,
                            Naziv = "BlaBla influencer",
                            Opis = "Tvoj profil je pregledan preko 1000 puta! Ljudi žele putovati s tobom!"
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Odgovor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pitanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Gradovi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gradovi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 44.226100000000002,
                            Longitude = 17.665800000000001,
                            Naziv = "Travnik"
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 43.848599999999998,
                            Longitude = 18.356400000000001,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            Id = 3,
                            Latitude = 44.537300000000002,
                            Longitude = 18.676600000000001,
                            Naziv = "Tuzla"
                        },
                        new
                        {
                            Id = 4,
                            Latitude = 43.343800000000002,
                            Longitude = 17.8078,
                            Naziv = "Mostar"
                        },
                        new
                        {
                            Id = 5,
                            Latitude = 44.773499999999999,
                            Longitude = 17.1937,
                            Naziv = "Banja Luka"
                        },
                        new
                        {
                            Id = 6,
                            Latitude = 44.206400000000002,
                            Longitude = 17.6708,
                            Naziv = "Bugojno"
                        },
                        new
                        {
                            Id = 7,
                            Latitude = 44.117800000000003,
                            Longitude = 17.6111,
                            Naziv = "Jajce"
                        },
                        new
                        {
                            Id = 8,
                            Latitude = 43.612499999999997,
                            Longitude = 18.9725,
                            Naziv = "Foča"
                        },
                        new
                        {
                            Id = 9,
                            Latitude = 44.440600000000003,
                            Longitude = 17.221800000000002,
                            Naziv = "Prijedor"
                        },
                        new
                        {
                            Id = 10,
                            Latitude = 44.981099999999998,
                            Longitude = 15.7471,
                            Naziv = "Bihać"
                        },
                        new
                        {
                            Id = 11,
                            Latitude = 44.160800000000002,
                            Longitude = 19.1021,
                            Naziv = "Zvornik"
                        },
                        new
                        {
                            Id = 12,
                            Latitude = 43.200899999999997,
                            Longitude = 17.684699999999999,
                            Naziv = "Široki Brijeg"
                        },
                        new
                        {
                            Id = 13,
                            Latitude = 44.360799999999998,
                            Longitude = 18.805299999999999,
                            Naziv = "Lukavac"
                        },
                        new
                        {
                            Id = 14,
                            Latitude = 44.541200000000003,
                            Longitude = 17.365400000000001,
                            Naziv = "Gradiška"
                        },
                        new
                        {
                            Id = 15,
                            Latitude = 43.337800000000001,
                            Longitude = 17.8139,
                            Naziv = "Stolac"
                        },
                        new
                        {
                            Id = 16,
                            Latitude = 44.4664,
                            Longitude = 19.1736,
                            Naziv = "Bijeljina"
                        },
                        new
                        {
                            Id = 17,
                            Latitude = 43.828400000000002,
                            Longitude = 17.404299999999999,
                            Naziv = "Livno"
                        },
                        new
                        {
                            Id = 18,
                            Latitude = 43.769799999999996,
                            Longitude = 18.0578,
                            Naziv = "Konjic"
                        },
                        new
                        {
                            Id = 19,
                            Latitude = 44.124899999999997,
                            Longitude = 18.123200000000001,
                            Naziv = "Visoko"
                        },
                        new
                        {
                            Id = 20,
                            Latitude = 44.775199999999998,
                            Longitude = 17.192399999999999,
                            Naziv = "Doboj"
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.Korisnici", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DatumKreiranja")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Korisnici", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumKreiranja = new DateTime(2025, 2, 10, 21, 34, 35, 924, DateTimeKind.Local).AddTicks(9744),
                            Email = "test@gmail.com",
                            Ime = "Test",
                            KorisnickoIme = "test",
                            LozinkaHash = "KaiUaS4zfaZiZnbuv7TN0r5OfeM=",
                            LozinkaSalt = "AglQFeC8HyIM/UV2yFOa0w==",
                            Prezime = "Korisnik"
                        },
                        new
                        {
                            Id = 2,
                            DatumKreiranja = new DateTime(2025, 2, 10, 21, 34, 35, 924, DateTimeKind.Local).AddTicks(9807),
                            Email = "admin@gmail.com",
                            Ime = "Admin",
                            KorisnickoIme = "admin",
                            LozinkaHash = "KaiUaS4zfaZiZnbuv7TN0r5OfeM=",
                            LozinkaSalt = "AglQFeC8HyIM/UV2yFOa0w==",
                            Prezime = "Korisnik"
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.KorisniciDostignuca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime");

                    b.Property<int>("DostignuceId")
                        .HasColumnType("int")
                        .HasColumnName("DostignuceId");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikId");

                    b.HasKey("Id");

                    b.HasIndex("DostignuceId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("KorisniciDostignuca", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumKreiranja = new DateTime(2025, 2, 10, 21, 34, 35, 925, DateTimeKind.Local).AddTicks(5069),
                            DostignuceId = 1,
                            KorisnikId = 1
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.KorisniciUloge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikId");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int")
                        .HasColumnName("UlogaId");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisniciUloge", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 925, DateTimeKind.Local).AddTicks(2438),
                            KorisnikId = 1,
                            UlogaId = 1
                        },
                        new
                        {
                            Id = 2,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 925, DateTimeKind.Local).AddTicks(2459),
                            KorisnikId = 2,
                            UlogaId = 2
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.Kuponi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrojIskoristivosti")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumPocetka")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Popust")
                        .HasColumnType("float");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Kuponi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojIskoristivosti = 5,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1272),
                            DatumPocetka = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1274),
                            Kod = "TESTNI-KOD",
                            KorisnikId = 1,
                            Naziv = "Testni kod",
                            Popust = 0.10000000000000001,
                            StateMachine = "draft"
                        },
                        new
                        {
                            Id = 2,
                            BrojIskoristivosti = 10,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1278),
                            DatumPocetka = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1279),
                            Kod = "WELCOME",
                            KorisnikId = 1,
                            Naziv = "Popust dobrodošlice",
                            Popust = 0.5,
                            StateMachine = "active"
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.Obavjestenja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Podnaslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Obavjestenja");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1359),
                            DatumKreiranja = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1361),
                            DatumZavrsetka = new DateTime(2025, 2, 12, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1362),
                            KorisnikId = 2,
                            Naslov = "Ažuriranje pravila privatnosti",
                            Opis = "Ažurirali smo naša pravila privatnosti kako bi ti pružili veću transparentnost i kontrolu nad tvojim podacima. Pregledaj nove postavke privatnosti u aplikaciji i prilagodi ih svojim potrebama.",
                            Podnaslov = "Više kontrole nad tvojim podacima",
                            StateMachine = "active"
                        },
                        new
                        {
                            Id = 2,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1367),
                            DatumKreiranja = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1368),
                            DatumZavrsetka = new DateTime(2025, 2, 10, 23, 34, 35, 926, DateTimeKind.Local).AddTicks(1369),
                            KorisnikId = 2,
                            Naslov = "Stigli su novi alati za bolje iskustvo!",
                            Opis = "RideWithMe je bogatiji za nove funkcionalnosti! Sada možeš lakše planirati putovanja, pratiti svoje vožnje i komunicirati s vozačima direktno iz aplikacije. Ažuriraj aplikaciju i isprobaj nove mogućnosti!",
                            Podnaslov = "Otkrij nove funkcije aplikacije",
                            StateMachine = "active"
                        },
                        new
                        {
                            Id = 3,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1372),
                            DatumKreiranja = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1373),
                            DatumZavrsetka = new DateTime(2025, 2, 11, 2, 34, 35, 926, DateTimeKind.Local).AddTicks(1374),
                            KorisnikId = 2,
                            Naslov = "Poboljšana korisnička podrška",
                            Opis = "Uveli smo nove opcije podrške u aplikaciji, uključujući chat uživo i detaljniji centar za pomoć. Kontaktiraj nas jednostavno putem aplikacije za bilo kakva pitanja ili sugestije!",
                            Podnaslov = "Brže rješenje tvojih upita",
                            StateMachine = "active"
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.Recenzija", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<string>("Komentar")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<int>("Ocjena")
                        .HasColumnType("int");

                    b.Property<int>("VoznjaId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("VoznjaId");

                    b.ToTable("Recenzije");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Reklame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("NazivKampanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazivKlijenta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SadrzajKampanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Reklame");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Uloge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Uloge", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Korisnik"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Administrator"
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.Voznje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DatumVrijemePocetka")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumVrijemeZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DogadjajId")
                        .HasColumnType("int");

                    b.Property<int>("GradDoId")
                        .HasColumnType("int");

                    b.Property<int>("GradOdId")
                        .HasColumnType("int");

                    b.Property<int?>("KlijentId")
                        .HasColumnType("int");

                    b.Property<int?>("KuponId")
                        .HasColumnType("int");

                    b.Property<string>("Napomena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VozacId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DogadjajId");

                    b.HasIndex("GradDoId");

                    b.HasIndex("GradOdId");

                    b.HasIndex("KlijentId");

                    b.HasIndex("KuponId");

                    b.HasIndex("VozacId");

                    b.ToTable("Voznje");
                });

            modelBuilder.Entity("ridewithme.Service.Database.VrstaZalbe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("VrstaZalbe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1213),
                            KorisnikId = 1,
                            Naziv = "Na vožnju"
                        },
                        new
                        {
                            Id = 2,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1226),
                            KorisnikId = 1,
                            Naziv = "Na vozača"
                        },
                        new
                        {
                            Id = 3,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1227),
                            KorisnikId = 1,
                            Naziv = "Na aplikaciju"
                        },
                        new
                        {
                            Id = 4,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1229),
                            KorisnikId = 1,
                            Naziv = "Ostalo"
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.Zalbe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumPreuzimanja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OdgovorNaZalbu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VrstaZalbeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("VrstaZalbeId");

                    b.ToTable("Zalbe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1306),
                            DatumKreiranja = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1308),
                            KorisnikId = 1,
                            Naslov = "Problem prilikom prijave",
                            Sadrzaj = "Prilikom pokušaja prijave na aplikaciju, ne mogu da se prijavim iako unosim ispravne podatke.",
                            StateMachine = "active",
                            VrstaZalbeId = 3
                        },
                        new
                        {
                            Id = 2,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1311),
                            DatumKreiranja = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1312),
                            KorisnikId = 1,
                            Naslov = "Vozač ne uzvraća poruke",
                            Sadrzaj = "Potrebno je da dogovorim lokaciju polaska sa vozačem vožnje ID: 2 ali ne mogu da dobijem povratnu informaciju od vozača.",
                            StateMachine = "active",
                            VrstaZalbeId = 2
                        },
                        new
                        {
                            Id = 3,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1314),
                            DatumKreiranja = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1316),
                            KorisnikId = 1,
                            Naslov = "Vožnja nije bila do navedene lokacije",
                            Sadrzaj = "Vožnja je naznačena da je do Sarajeva, a vozili smo se do Kaknja, molim za povrat novca.",
                            StateMachine = "active",
                            VrstaZalbeId = 1
                        },
                        new
                        {
                            Id = 4,
                            DatumIzmjene = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1317),
                            DatumKreiranja = new DateTime(2025, 2, 10, 21, 34, 35, 926, DateTimeKind.Local).AddTicks(1319),
                            KorisnikId = 1,
                            Naslov = "Neiskoristiv kupon",
                            Sadrzaj = "Naznačeno je da koristimo kupon 'WELCOME', ali on ne radi.",
                            StateMachine = "active",
                            VrstaZalbeId = 4
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.FAQ", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ridewithme.Service.Database.KorisniciDostignuca", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Dostignuca", "Dostignuce")
                        .WithMany("KorisniciDostignuca")
                        .HasForeignKey("DostignuceId")
                        .IsRequired()
                        .HasConstraintName("FK_KorisniciDostignuca_Dostignuca");

                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany("KorisniciDostignuca")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK_KorisniciDostignuca_Korisnici");

                    b.Navigation("Dostignuce");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ridewithme.Service.Database.KorisniciUloge", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany("KorisniciUloge")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK_KorisniciUloge_Korisnici");

                    b.HasOne("ridewithme.Service.Database.Uloge", "Uloga")
                        .WithMany("KorisniciUloge")
                        .HasForeignKey("UlogaId")
                        .IsRequired()
                        .HasConstraintName("FK_KorisniciUloge_Uloge");

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Kuponi", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Obavjestenja", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Recenzija", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ridewithme.Service.Database.Voznje", "Voznja")
                        .WithMany()
                        .HasForeignKey("VoznjaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");

                    b.Navigation("Voznja");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Reklame", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Voznje", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Dogadjaji", "Dogadjaj")
                        .WithMany()
                        .HasForeignKey("DogadjajId");

                    b.HasOne("ridewithme.Service.Database.Gradovi", "GradDo")
                        .WithMany()
                        .HasForeignKey("GradDoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ridewithme.Service.Database.Gradovi", "GradOd")
                        .WithMany()
                        .HasForeignKey("GradOdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ridewithme.Service.Database.Korisnici", "Klijent")
                        .WithMany()
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ridewithme.Service.Database.Kuponi", "Kupon")
                        .WithMany()
                        .HasForeignKey("KuponId");

                    b.HasOne("ridewithme.Service.Database.Korisnici", "Vozac")
                        .WithMany()
                        .HasForeignKey("VozacId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Dogadjaj");

                    b.Navigation("GradDo");

                    b.Navigation("GradOd");

                    b.Navigation("Klijent");

                    b.Navigation("Kupon");

                    b.Navigation("Vozac");
                });

            modelBuilder.Entity("ridewithme.Service.Database.VrstaZalbe", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Zalbe", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ridewithme.Service.Database.VrstaZalbe", "VrstaZalbe")
                        .WithMany()
                        .HasForeignKey("VrstaZalbeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrator");

                    b.Navigation("Korisnik");

                    b.Navigation("VrstaZalbe");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Dostignuca", b =>
                {
                    b.Navigation("KorisniciDostignuca");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Korisnici", b =>
                {
                    b.Navigation("KorisniciDostignuca");

                    b.Navigation("KorisniciUloge");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Uloge", b =>
                {
                    b.Navigation("KorisniciUloge");
                });
#pragma warning restore 612, 618
        }
    }
}
