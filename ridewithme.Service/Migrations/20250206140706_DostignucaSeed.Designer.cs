// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using ridewithme.Service.Database;

#nullable disable

namespace ridewithme.Service.Migrations
{
    [DbContext(typeof(RidewithmeContext))]
    [Migration("20250206140706_DostignucaSeed")]
    partial class DostignucaSeed
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("ridewithme.Service.Database.Dogadjaji", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumPocetka")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Dogadjaji");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Dostignuca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .IsRequired()
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.ToTable("Dostignuca", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Prva vožnja",
                            Opis = "Završio si svoju prvu vožnju! Dobrodošli u zajednicu!",
                            Slika = new byte[] { 60, 63, 120, 109, 108, 32, 118, 101, 114, 115, 105, 111, 110, 61, 34, 49, 46, 48, 34, 32, 101, 110, 99, 111, 100, 105, 110, 103, 61, 34, 117, 116, 102, 45, 56, 34, 63, 62, 60, 33, 45, 45, 32, 85, 112, 108, 111, 97, 100, 101, 100, 32, 116, 111, 58, 32, 83, 86, 71, 32, 82, 101, 112, 111, 44, 32, 119, 119, 119, 46, 115, 118, 103, 114, 101, 112, 111, 46, 99, 111, 109, 44, 32, 71, 101, 110, 101, 114, 97, 116, 111, 114, 58, 32, 83, 86, 71, 32, 82, 101, 112, 111, 32, 77, 105, 120, 101, 114, 32, 84, 111, 111, 108, 115, 32, 45, 45, 62, 13, 10, 60, 115, 118, 103, 32, 119, 105, 100, 116, 104, 61, 34, 56, 48, 48, 112, 120, 34, 32, 104, 101, 105, 103, 104, 116, 61, 34, 56, 48, 48, 112, 120, 34, 32, 118, 105, 101, 119, 66, 111, 120, 61, 34, 48, 32, 48, 32, 51, 50, 32, 51, 50, 34, 32, 102, 105, 108, 108, 61, 34, 110, 111, 110, 101, 34, 32, 120, 109, 108, 110, 115, 61, 34, 104, 116, 116, 112, 58, 47, 47, 119, 119, 119, 46, 119, 51, 46, 111, 114, 103, 47, 50, 48, 48, 48, 47, 115, 118, 103, 34, 62, 13, 10, 60, 112, 97, 116, 104, 32, 100, 61, 34, 77, 49, 54, 32, 50, 67, 49, 51, 46, 48, 56, 50, 54, 32, 50, 32, 49, 48, 46, 50, 56, 52, 55, 32, 51, 46, 49, 53, 56, 57, 51, 32, 56, 46, 50, 50, 49, 56, 52, 32, 53, 46, 50, 50, 49, 56, 51, 67, 54, 46, 49, 53, 56, 57, 52, 32, 55, 46, 50, 56, 52, 55, 51, 32, 53, 46, 48, 48, 48, 48, 49, 32, 49, 48, 46, 48, 56, 50, 54, 32, 53, 46, 48, 48, 48, 48, 49, 32, 49, 51, 86, 50, 57, 67, 52, 46, 57, 57, 57, 50, 32, 50, 57, 46, 49, 53, 49, 57, 32, 53, 46, 48, 51, 50, 57, 57, 32, 50, 57, 46, 51, 48, 50, 32, 53, 46, 48, 57, 56, 56, 51, 32, 50, 57, 46, 52, 51, 56, 57, 67, 53, 46, 49, 54, 52, 54, 56, 32, 50, 57, 46, 53, 55, 53, 55, 32, 53, 46, 50, 54, 48, 56, 52, 32, 50, 57, 46, 54, 57, 53, 56, 32, 53, 46, 51, 56, 48, 48, 49, 32, 50, 57, 46, 55, 57, 67, 53, 46, 53, 48, 48, 50, 32, 50, 57, 46, 56, 56, 51, 53, 32, 53, 46, 54, 52, 48, 49, 53, 32, 50, 57, 46, 57, 52, 56, 51, 32, 53, 46, 55, 56, 57, 49, 57, 32, 50, 57, 46, 57, 55, 57, 53, 67, 53, 46, 57, 51, 56, 50, 51, 32, 51, 48, 46, 48, 49, 48, 55, 32, 54, 46, 48, 57, 50, 52, 50, 32, 51, 48, 46, 48, 48, 55, 53, 32, 54, 46, 50, 52, 48, 48, 49, 32, 50, 57, 46, 57, 55, 76, 49, 53, 32, 50, 55, 46, 55, 55, 86, 50, 52, 67, 49, 53, 32, 50, 51, 46, 55, 51, 52, 56, 32, 49, 53, 46, 49, 48, 53, 52, 32, 50, 51, 46, 52, 56, 48, 52, 32, 49, 53, 46, 50, 57, 50, 57, 32, 50, 51, 46, 50, 57, 50, 57, 67, 49, 53, 46, 52, 56, 48, 52, 32, 50, 51, 46, 49, 48, 53, 52, 32, 49, 53, 46, 55, 51, 52, 56, 32, 50, 51, 32, 49, 54, 32, 50, 51, 67, 49, 54, 46, 50, 54, 53, 50, 32, 50, 51, 32, 49, 54, 46, 53, 49, 57, 54, 32, 50, 51, 46, 49, 48, 53, 52, 32, 49, 54, 46, 55, 48, 55, 49, 32, 50, 51, 46, 50, 57, 50, 57, 67, 49, 54, 46, 56, 57, 52, 55, 32, 50, 51, 46, 52, 56, 48, 52, 32, 49, 55, 32, 50, 51, 46, 55, 51, 52, 56, 32, 49, 55, 32, 50, 52, 86, 50, 55, 46, 56, 49, 76, 50, 53, 46, 55, 54, 32, 51, 48, 67, 50, 53, 46, 56, 51, 57, 55, 32, 51, 48, 46, 48, 48, 57, 54, 32, 50, 53, 46, 57, 50, 48, 51, 32, 51, 48, 46, 48, 48, 57, 54, 32, 50, 54, 32, 51, 48, 67, 50, 54, 46, 50, 54, 53, 50, 32, 51, 48, 32, 50, 54, 46, 53, 49, 57, 54, 32, 50, 57, 46, 56, 57, 52, 54, 32, 50, 54, 46, 55, 48, 55, 49, 32, 50, 57, 46, 55, 48, 55, 49, 67, 50, 54, 46, 56, 57, 52, 55, 32, 50, 57, 46, 53, 49, 57, 54, 32, 50, 55, 32, 50, 57, 46, 50, 54, 53, 50, 32, 50, 55, 32, 50, 57, 86, 49, 51, 67, 50, 55, 32, 49, 48, 46, 48, 56, 50, 54, 32, 50, 53, 46, 56, 52, 49, 49, 32, 55, 46, 50, 56, 52, 55, 51, 32, 50, 51, 46, 55, 55, 56, 50, 32, 53, 46, 50, 50, 49, 56, 51, 67, 50, 49, 46, 55, 49, 53, 51, 32, 51, 46, 49, 53, 56, 57, 51, 32, 49, 56, 46, 57, 49, 55, 52, 32, 50, 32, 49, 54, 32, 50, 90, 34, 32, 102, 105, 108, 108, 61, 34, 35, 70, 66, 67, 48, 50, 68, 34, 47, 62, 13, 10, 60, 112, 97, 116, 104, 32, 100, 61, 34, 77, 53, 46, 48, 48, 48, 48, 49, 32, 49, 51, 86, 50, 57, 67, 52, 46, 57, 57, 57, 50, 32, 50, 57, 46, 49, 53, 49, 57, 32, 53, 46, 48, 51, 50, 57, 57, 32, 50, 57, 46, 51, 48, 50, 32, 53, 46, 48, 57, 56, 56, 51, 32, 50, 57, 46, 52, 51, 56, 57, 67, 53, 46, 49, 54, 52, 54, 56, 32, 50, 57, 46, 53, 55, 53, 55, 32, 53, 46, 50, 54, 48, 56, 52, 32, 50, 57, 46, 54, 57, 53, 56, 32, 53, 46, 51, 56, 48, 48, 49, 32, 50, 57, 46, 55, 57, 67, 53, 46, 53, 48, 48, 50, 32, 50, 57, 46, 56, 56, 51, 53, 32, 53, 46, 54, 52, 48, 49, 53, 32, 50, 57, 46, 57, 52, 56, 51, 32, 53, 46, 55, 56, 57, 49, 57, 32, 50, 57, 46, 57, 55, 57, 53, 67, 53, 46, 57, 51, 56, 50, 51, 32, 51, 48, 46, 48, 49, 48, 55, 32, 54, 46, 48, 57, 50, 52, 50, 32, 51, 48, 46, 48, 48, 55, 53, 32, 54, 46, 50, 52, 48, 48, 49, 32, 50, 57, 46, 57, 55, 76, 49, 53, 32, 50, 55, 46, 56, 86, 50, 52, 67, 49, 52, 46, 57, 57, 57, 52, 32, 50, 51, 46, 55, 52, 54, 53, 32, 49, 53, 46, 48, 57, 53, 49, 32, 50, 51, 46, 53, 48, 50, 50, 32, 49, 53, 46, 50, 54, 55, 55, 32, 50, 51, 46, 51, 49, 54, 53, 67, 49, 53, 46, 52, 52, 48, 52, 32, 50, 51, 46, 49, 51, 48, 57, 32, 49, 53, 46, 54, 55, 55, 49, 32, 50, 51, 46, 48, 49, 55, 55, 32, 49, 53, 46, 57, 51, 32, 50, 51, 86, 50, 67, 49, 51, 46, 48, 50, 52, 56, 32, 50, 46, 48, 49, 56, 52, 57, 32, 49, 48, 46, 50, 52, 52, 56, 32, 51, 46, 49, 56, 53, 53, 55, 32, 56, 46, 49, 57, 55, 48, 53, 32, 53, 46, 50, 52, 54, 52, 55, 67, 54, 46, 49, 52, 57, 50, 55, 32, 55, 46, 51, 48, 55, 51, 55, 32, 52, 46, 57, 57, 57, 57, 54, 32, 49, 48, 46, 48, 57, 52, 55, 32, 53, 46, 48, 48, 48, 48, 49, 32, 49, 51, 90, 34, 32, 102, 105, 108, 108, 61, 34, 35, 70, 68, 68, 56, 51, 53, 34, 47, 62, 13, 10, 60, 112, 97, 116, 104, 32, 100, 61, 34, 77, 50, 50, 46, 56, 55, 32, 49, 48, 46, 57, 50, 67, 50, 50, 46, 56, 49, 50, 32, 49, 48, 46, 55, 52, 50, 50, 32, 50, 50, 46, 55, 48, 53, 52, 32, 49, 48, 46, 53, 56, 52, 51, 32, 50, 50, 46, 53, 54, 50, 51, 32, 49, 48, 46, 52, 54, 52, 49, 67, 50, 50, 46, 52, 49, 57, 49, 32, 49, 48, 46, 51, 52, 51, 57, 32, 50, 50, 46, 50, 52, 53, 49, 32, 49, 48, 46, 50, 54, 54, 51, 32, 50, 50, 46, 48, 54, 32, 49, 48, 46, 50, 52, 76, 49, 56, 46, 52, 54, 32, 57, 46, 55, 48, 57, 57, 55, 76, 49, 54, 46, 56, 53, 32, 54, 46, 52, 52, 57, 57, 55, 67, 49, 54, 46, 55, 54, 56, 49, 32, 54, 46, 50, 56, 48, 57, 32, 49, 54, 46, 54, 52, 48, 51, 32, 54, 46, 49, 51, 56, 51, 50, 32, 49, 54, 46, 52, 56, 49, 49, 32, 54, 46, 48, 51, 56, 53, 53, 67, 49, 54, 46, 51, 50, 49, 57, 32, 53, 46, 57, 51, 56, 55, 56, 32, 49, 54, 46, 49, 51, 55, 57, 32, 53, 46, 56, 56, 53, 56, 54, 32, 49, 53, 46, 57, 53, 32, 53, 46, 56, 56, 53, 56, 54, 67, 49, 53, 46, 55, 54, 50, 49, 32, 53, 46, 56, 56, 53, 56, 54, 32, 49, 53, 46, 53, 55, 56, 49, 32, 53, 46, 57, 51, 56, 55, 56, 32, 49, 53, 46, 52, 49, 56, 57, 32, 54, 46, 48, 51, 56, 53, 53, 67, 49, 53, 46, 50, 53, 57, 55, 32, 54, 46, 49, 51, 56, 51, 50, 32, 49, 53, 46, 49, 51, 49, 57, 32, 54, 46, 50, 56, 48, 57, 32, 49, 53, 46, 48, 53, 32, 54, 46, 52, 52, 57, 57, 55, 76, 49, 51, 46, 52, 52, 32, 57, 46, 55, 48, 57, 57, 55, 76, 57, 46, 56, 52, 32, 49, 48, 46, 50, 52, 67, 57, 46, 54, 53, 54, 56, 54, 32, 49, 48, 46, 50, 54, 56, 50, 32, 57, 46, 52, 56, 53, 49, 54, 32, 49, 48, 46, 51, 52, 54, 56, 32, 57, 46, 51, 52, 52, 48, 57, 32, 49, 48, 46, 52, 54, 55, 67, 57, 46, 50, 48, 51, 48, 49, 32, 49, 48, 46, 53, 56, 55, 49, 32, 57, 46, 48, 57, 56, 48, 57, 32, 49, 48, 46, 55, 52, 52, 49, 32, 57, 46, 48, 52, 49, 48, 53, 32, 49, 48, 46, 57, 50, 48, 53, 67, 56, 46, 57, 56, 52, 32, 49, 49, 46, 48, 57, 54, 56, 32, 56, 46, 57, 55, 55, 48, 56, 32, 49, 49, 46, 50, 56, 53, 53, 32, 57, 46, 48, 50, 49, 48, 52, 32, 49, 49, 46, 52, 54, 53, 53, 67, 57, 46, 48, 54, 53, 32, 49, 49, 46, 54, 52, 53, 53, 32, 57, 46, 49, 53, 56, 49, 50, 32, 49, 49, 46, 56, 48, 57, 56, 32, 57, 46, 50, 57, 32, 49, 49, 46, 57, 52, 76, 49, 49, 46, 56, 57, 32, 49, 52, 46, 52, 56, 76, 49, 49, 46, 50, 56, 32, 49, 56, 46, 48, 55, 67, 49, 49, 46, 50, 52, 51, 50, 32, 49, 56, 46, 50, 53, 54, 53, 32, 49, 49, 46, 50, 54, 48, 52, 32, 49, 56, 46, 52, 52, 57, 54, 32, 49, 49, 46, 51, 50, 57, 53, 32, 49, 56, 46, 54, 50, 54, 55, 67, 49, 49, 46, 51, 57, 56, 53, 32, 49, 56, 46, 56, 48, 51, 56, 32, 49, 49, 46, 53, 49, 54, 55, 32, 49, 56, 46, 57, 53, 55, 54, 32, 49, 49, 46, 54, 55, 32, 49, 57, 46, 48, 55, 67, 49, 49, 46, 56, 50, 49, 51, 32, 49, 57, 46, 49, 56, 49, 54, 32, 49, 50, 46, 48, 48, 49, 32, 49, 57, 46, 50, 52, 56, 51, 32, 49, 50, 46, 49, 56, 56, 53, 32, 49, 57, 46, 50, 54, 50, 53, 67, 49, 50, 46, 51, 55, 54, 32, 49, 57, 46, 50, 55, 54, 54, 32, 49, 50, 46, 53, 54, 51, 55, 32, 49, 57, 46, 50, 51, 55, 54, 32, 49, 50, 46, 55, 51, 32, 49, 57, 46, 49, 53, 76, 49, 54, 32, 49, 55, 46, 52, 51, 76, 49, 57, 46, 50, 50, 32, 49, 57, 46, 49, 51, 67, 49, 57, 46, 51, 54, 54, 56, 32, 49, 57, 46, 50, 48, 48, 52, 32, 49, 57, 46, 53, 50, 55, 50, 32, 49, 57, 46, 50, 51, 55, 57, 32, 49, 57, 46, 54, 57, 32, 49, 57, 46, 50, 52, 67, 49, 57, 46, 56, 57, 56, 52, 32, 49, 57, 46, 50, 51, 56, 54, 32, 50, 48, 46, 49, 48, 49, 50, 32, 49, 57, 46, 49, 55, 50, 50, 32, 50, 48, 46, 50, 55, 32, 49, 57, 46, 48, 53, 67, 50, 48, 46, 52, 50, 53, 50, 32, 49, 56, 46, 57, 51, 56, 56, 32, 50, 48, 46, 53, 52, 53, 51, 32, 49, 56, 46, 55, 56, 53, 54, 32, 50, 48, 46, 54, 49, 54, 49, 32, 49, 56, 46, 54, 48, 56, 52, 67, 50, 48, 46, 54, 56, 55, 32, 49, 56, 46, 52, 51, 49, 50, 32, 50, 48, 46, 55, 48, 53, 55, 32, 49, 56, 46, 50, 51, 55, 53, 32, 50, 48, 46, 54, 55, 32, 49, 56, 46, 48, 53, 76, 50, 48, 32, 49, 52, 46, 52, 56, 76, 50, 50, 46, 54, 32, 49, 49, 46, 57, 52, 67, 50, 50, 46, 55, 51, 53, 54, 32, 49, 49, 46, 56, 49, 50, 32, 50, 50, 46, 56, 51, 50, 56, 32, 49, 49, 46, 54, 52, 56, 55, 32, 50, 50, 46, 56, 56, 48, 53, 32, 49, 49, 46, 52, 54, 56, 53, 67, 50, 50, 46, 57, 50, 56, 50, 32, 49, 49, 46, 50, 56, 56, 50, 32, 50, 50, 46, 57, 50, 52, 54, 32, 49, 49, 46, 48, 57, 56, 51, 32, 50, 50, 46, 56, 55, 32, 49, 48, 46, 57, 50, 90, 34, 32, 102, 105, 108, 108, 61, 34, 35, 67, 50, 49, 56, 53, 66, 34, 47, 62, 13, 10, 60, 112, 97, 116, 104, 32, 100, 61, 34, 77, 49, 53, 46, 48, 53, 32, 54, 46, 52, 52, 57, 57, 53, 76, 49, 51, 46, 52, 52, 32, 57, 46, 55, 48, 57, 57, 53, 76, 57, 46, 56, 52, 48, 48, 50, 32, 49, 48, 46, 50, 51, 67, 57, 46, 54, 53, 51, 55, 53, 32, 49, 48, 46, 50, 53, 55, 49, 32, 57, 46, 52, 55, 56, 57, 50, 32, 49, 48, 46, 51, 51, 54, 50, 32, 57, 46, 51, 51, 53, 54, 50, 32, 49, 48, 46, 52, 53, 56, 51, 67, 57, 46, 49, 57, 50, 51, 51, 32, 49, 48, 46, 53, 56, 48, 51, 32, 57, 46, 48, 56, 54, 52, 32, 49, 48, 46, 55, 52, 48, 52, 32, 57, 46, 48, 51, 48, 48, 50, 32, 49, 48, 46, 57, 50, 67, 56, 46, 57, 55, 56, 50, 32, 49, 49, 46, 48, 57, 52, 53, 32, 56, 46, 57, 55, 53, 48, 52, 32, 49, 49, 46, 50, 55, 57, 57, 32, 57, 46, 48, 50, 48, 56, 54, 32, 49, 49, 46, 52, 53, 54, 49, 67, 57, 46, 48, 54, 54, 54, 56, 32, 49, 49, 46, 54, 51, 50, 52, 32, 57, 46, 49, 53, 57, 55, 52, 32, 49, 49, 46, 55, 57, 50, 55, 32, 57, 46, 50, 57, 48, 48, 50, 32, 49, 49, 46, 57, 50, 76, 49, 49, 46, 56, 57, 32, 49, 52, 46, 52, 54, 76, 49, 49, 46, 50, 56, 32, 49, 56, 46, 48, 53, 67, 49, 49, 46, 50, 52, 57, 53, 32, 49, 56, 46, 50, 51, 51, 52, 32, 49, 49, 46, 50, 55, 48, 56, 32, 49, 56, 46, 52, 50, 49, 55, 32, 49, 49, 46, 51, 52, 49, 53, 32, 49, 56, 46, 53, 57, 51, 56, 67, 49, 49, 46, 52, 49, 50, 49, 32, 49, 56, 46, 55, 54, 53, 56, 32, 49, 49, 46, 53, 50, 57, 51, 32, 49, 56, 46, 57, 49, 52, 55, 32, 49, 49, 46, 54, 56, 32, 49, 57, 46, 48, 50, 51, 56, 67, 49, 49, 46, 56, 51, 48, 54, 32, 49, 57, 46, 49, 51, 50, 57, 32, 49, 50, 46, 48, 48, 56, 55, 32, 49, 57, 46, 49, 57, 55, 56, 32, 49, 50, 46, 49, 57, 52, 50, 32, 49, 57, 46, 50, 49, 49, 51, 67, 49, 50, 46, 51, 55, 57, 55, 32, 49, 57, 46, 50, 50, 52, 55, 32, 49, 50, 46, 53, 54, 53, 50, 32, 49, 57, 46, 49, 56, 54, 50, 32, 49, 50, 46, 55, 51, 32, 49, 57, 46, 49, 76, 49, 54, 32, 49, 55, 46, 52, 51, 86, 53, 46, 57, 51, 57, 57, 53, 67, 49, 53, 46, 56, 48, 57, 53, 32, 53, 46, 57, 50, 53, 51, 49, 32, 49, 53, 46, 54, 49, 56, 56, 32, 53, 46, 57, 54, 53, 53, 54, 32, 49, 53, 46, 52, 53, 48, 52, 32, 54, 46, 48, 53, 53, 57, 53, 67, 49, 53, 46, 50, 56, 50, 32, 54, 46, 49, 52, 54, 51, 51, 32, 49, 53, 46, 49, 52, 51, 49, 32, 54, 46, 50, 56, 51, 48, 54, 32, 49, 53, 46, 48, 53, 32, 54, 46, 52, 52, 57, 57, 53, 90, 34, 32, 102, 105, 108, 108, 61, 34, 35, 69, 67, 52, 48, 55, 65, 34, 47, 62, 13, 10, 60, 112, 97, 116, 104, 32, 100, 61, 34, 77, 49, 54, 32, 50, 67, 49, 51, 46, 48, 56, 50, 54, 32, 50, 32, 49, 48, 46, 50, 56, 52, 55, 32, 51, 46, 49, 53, 56, 57, 51, 32, 56, 46, 50, 50, 49, 56, 52, 32, 53, 46, 50, 50, 49, 56, 51, 67, 54, 46, 49, 53, 56, 57, 52, 32, 55, 46, 50, 56, 52, 55, 51, 32, 53, 46, 48, 48, 48, 48, 49, 32, 49, 48, 46, 48, 56, 50, 54, 32, 53, 46, 48, 48, 48, 48, 49, 32, 49, 51, 86, 50, 57, 67, 52, 46, 57, 57, 57, 50, 32, 50, 57, 46, 49, 53, 49, 57, 32, 53, 46, 48, 51, 50, 57, 57, 32, 50, 57, 46, 51, 48, 50, 32, 53, 46, 48, 57, 56, 56, 51, 32, 50, 57, 46, 52, 51, 56, 57, 67, 53, 46, 49, 54, 52, 54, 56, 32, 50, 57, 46, 53, 55, 53, 55, 32, 53, 46, 50, 54, 48, 56, 52, 32, 50, 57, 46, 54, 57, 53, 56, 32, 53, 46, 51, 56, 48, 48, 49, 32, 50, 57, 46, 55, 57, 67, 53, 46, 53, 48, 48, 50, 32, 50, 57, 46, 56, 56, 51, 53, 32, 53, 46, 54, 52, 48, 49, 53, 32, 50, 57, 46, 57, 52, 56, 51, 32, 53, 46, 55, 56, 57, 49, 57, 32, 50, 57, 46, 57, 55, 57, 53, 67, 53, 46, 57, 51, 56, 50, 51, 32, 51, 48, 46, 48, 49, 48, 55, 32, 54, 46, 48, 57, 50, 52, 50, 32, 51, 48, 46, 48, 48, 55, 53, 32, 54, 46, 50, 52, 48, 48, 49, 32, 50, 57, 46, 57, 55, 76, 49, 54, 32, 50, 55, 46, 53, 51, 76, 50, 53, 46, 55, 54, 32, 51, 48, 67, 50, 53, 46, 56, 51, 57, 55, 32, 51, 48, 46, 48, 48, 57, 54, 32, 50, 53, 46, 57, 50, 48, 51, 32, 51, 48, 46, 48, 48, 57, 54, 32, 50, 54, 32, 51, 48, 67, 50, 54, 46, 50, 54, 53, 50, 32, 51, 48, 32, 50, 54, 46, 53, 49, 57, 54, 32, 50, 57, 46, 56, 57, 52, 54, 32, 50, 54, 46, 55, 48, 55, 49, 32, 50, 57, 46, 55, 48, 55, 49, 67, 50, 54, 46, 56, 57, 52, 55, 32, 50, 57, 46, 53, 49, 57, 54, 32, 50, 55, 32, 50, 57, 46, 50, 54, 53, 50, 32, 50, 55, 32, 50, 57, 86, 49, 51, 67, 50, 55, 32, 49, 48, 46, 48, 56, 50, 54, 32, 50, 53, 46, 56, 52, 49, 49, 32, 55, 46, 50, 56, 52, 55, 51, 32, 50, 51, 46, 55, 55, 56, 50, 32, 53, 46, 50, 50, 49, 56, 51, 67, 50, 49, 46, 55, 49, 53, 51, 32, 51, 46, 49, 53, 56, 57, 51, 32, 49, 56, 46, 57, 49, 55, 52, 32, 50, 32, 49, 54, 32, 50, 90, 77, 49, 54, 32, 52, 67, 49, 55, 46, 55, 56, 32, 52, 32, 49, 57, 46, 53, 50, 48, 49, 32, 52, 46, 53, 50, 55, 56, 52, 32, 50, 49, 46, 48, 48, 48, 49, 32, 53, 46, 53, 49, 54, 55, 55, 67, 50, 50, 46, 52, 56, 48, 50, 32, 54, 46, 53, 48, 53, 55, 49, 32, 50, 51, 46, 54, 51, 51, 55, 32, 55, 46, 57, 49, 49, 51, 49, 32, 50, 52, 46, 51, 49, 52, 57, 32, 57, 46, 53, 53, 53, 56, 53, 67, 50, 52, 46, 57, 57, 54, 49, 32, 49, 49, 46, 50, 48, 48, 52, 32, 50, 53, 46, 49, 55, 52, 52, 32, 49, 51, 46, 48, 49, 32, 50, 52, 46, 56, 50, 55, 49, 32, 49, 52, 46, 55, 53, 53, 56, 67, 50, 52, 46, 52, 55, 57, 56, 32, 49, 54, 46, 53, 48, 49, 54, 32, 50, 51, 46, 54, 50, 50, 54, 32, 49, 56, 46, 49, 48, 53, 51, 32, 50, 50, 46, 51, 54, 52, 32, 49, 57, 46, 51, 54, 52, 67, 50, 49, 46, 49, 48, 53, 51, 32, 50, 48, 46, 54, 50, 50, 54, 32, 49, 57, 46, 53, 48, 49, 55, 32, 50, 49, 46, 52, 55, 57, 56, 32, 49, 55, 46, 55, 53, 53, 56, 32, 50, 49, 46, 56, 50, 55, 49, 67, 49, 54, 46, 48, 49, 32, 50, 50, 46, 49, 55, 52, 51, 32, 49, 52, 46, 50, 48, 48, 52, 32, 50, 49, 46, 57, 57, 54, 49, 32, 49, 50, 46, 53, 53, 53, 57, 32, 50, 49, 46, 51, 49, 52, 57, 67, 49, 48, 46, 57, 49, 49, 51, 32, 50, 48, 46, 54, 51, 51, 55, 32, 57, 46, 53, 48, 53, 55, 50, 32, 49, 57, 46, 52, 56, 48, 50, 32, 56, 46, 53, 49, 54, 55, 57, 32, 49, 56, 46, 48, 48, 48, 49, 67, 55, 46, 53, 50, 55, 56, 54, 32, 49, 54, 46, 53, 50, 48, 49, 32, 55, 46, 48, 48, 48, 48, 49, 32, 49, 52, 46, 55, 56, 32, 55, 46, 48, 48, 48, 48, 49, 32, 49, 51, 67, 55, 46, 48, 48, 48, 48, 49, 32, 49, 48, 46, 54, 49, 51, 49, 32, 55, 46, 57, 52, 56, 50, 51, 32, 56, 46, 51, 50, 51, 56, 55, 32, 57, 46, 54, 51, 54, 48, 53, 32, 54, 46, 54, 51, 54, 48, 52, 67, 49, 49, 46, 51, 50, 51, 57, 32, 52, 46, 57, 52, 56, 50, 49, 32, 49, 51, 46, 54, 49, 51, 49, 32, 52, 32, 49, 54, 32, 52, 90, 77, 55, 46, 48, 48, 48, 48, 49, 32, 50, 55, 46, 55, 49, 86, 49, 57, 46, 50, 56, 67, 55, 46, 57, 49, 53, 54, 56, 32, 50, 48, 46, 53, 56, 57, 55, 32, 57, 46, 49, 48, 53, 55, 49, 32, 50, 49, 46, 54, 56, 52, 49, 32, 49, 48, 46, 52, 56, 55, 51, 32, 50, 50, 46, 52, 56, 55, 49, 67, 49, 49, 46, 56, 54, 56, 57, 32, 50, 51, 46, 50, 57, 48, 50, 32, 49, 51, 46, 52, 48, 56, 56, 32, 50, 51, 46, 55, 56, 50, 53, 32, 49, 53, 32, 50, 51, 46, 57, 51, 86, 50, 53, 46, 55, 49, 76, 55, 46, 48, 48, 48, 48, 49, 32, 50, 55, 46, 55, 49, 90, 77, 50, 53, 32, 50, 55, 46, 55, 49, 76, 49, 55, 32, 50, 53, 46, 55, 49, 86, 50, 51, 46, 57, 49, 67, 49, 56, 46, 53, 57, 49, 50, 32, 50, 51, 46, 55, 54, 50, 53, 32, 50, 48, 46, 49, 51, 49, 50, 32, 50, 51, 46, 50, 55, 48, 50, 32, 50, 49, 46, 53, 49, 50, 55, 32, 50, 50, 46, 52, 54, 55, 49, 67, 50, 50, 46, 56, 57, 52, 51, 32, 50, 49, 46, 54, 54, 52, 49, 32, 50, 52, 46, 48, 56, 52, 51, 32, 50, 48, 46, 53, 54, 57, 55, 32, 50, 53, 32, 49, 57, 46, 50, 54, 86, 50, 55, 46, 55, 49, 90, 34, 32, 102, 105, 108, 108, 61, 34, 35, 50, 54, 51, 50, 51, 56, 34, 47, 62, 13, 10, 60, 47, 115, 118, 103, 62 }
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.FAQ", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Odgovor")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Pitanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("FAQs");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Gradovi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Gradovi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Latitude = 44.226100000000002,
                            Longitude = 17.665800000000001,
                            Naziv = "Travnik"
                        },
                        new
                        {
                            Id = 2,
                            Latitude = 43.848599999999998,
                            Longitude = 18.356400000000001,
                            Naziv = "Sarajevo"
                        },
                        new
                        {
                            Id = 3,
                            Latitude = 44.537300000000002,
                            Longitude = 18.676600000000001,
                            Naziv = "Tuzla"
                        },
                        new
                        {
                            Id = 4,
                            Latitude = 43.343800000000002,
                            Longitude = 17.8078,
                            Naziv = "Mostar"
                        },
                        new
                        {
                            Id = 5,
                            Latitude = 44.773499999999999,
                            Longitude = 17.1937,
                            Naziv = "Banja Luka"
                        },
                        new
                        {
                            Id = 6,
                            Latitude = 44.206400000000002,
                            Longitude = 17.6708,
                            Naziv = "Bugojno"
                        },
                        new
                        {
                            Id = 7,
                            Latitude = 44.117800000000003,
                            Longitude = 17.6111,
                            Naziv = "Jajce"
                        },
                        new
                        {
                            Id = 8,
                            Latitude = 43.612499999999997,
                            Longitude = 18.9725,
                            Naziv = "Foča"
                        },
                        new
                        {
                            Id = 9,
                            Latitude = 44.440600000000003,
                            Longitude = 17.221800000000002,
                            Naziv = "Prijedor"
                        },
                        new
                        {
                            Id = 10,
                            Latitude = 44.981099999999998,
                            Longitude = 15.7471,
                            Naziv = "Bihać"
                        },
                        new
                        {
                            Id = 11,
                            Latitude = 44.160800000000002,
                            Longitude = 19.1021,
                            Naziv = "Zvornik"
                        },
                        new
                        {
                            Id = 12,
                            Latitude = 43.200899999999997,
                            Longitude = 17.684699999999999,
                            Naziv = "Široki Brijeg"
                        },
                        new
                        {
                            Id = 13,
                            Latitude = 44.360799999999998,
                            Longitude = 18.805299999999999,
                            Naziv = "Lukavac"
                        },
                        new
                        {
                            Id = 14,
                            Latitude = 44.541200000000003,
                            Longitude = 17.365400000000001,
                            Naziv = "Gradiška"
                        },
                        new
                        {
                            Id = 15,
                            Latitude = 43.337800000000001,
                            Longitude = 17.8139,
                            Naziv = "Stolac"
                        },
                        new
                        {
                            Id = 16,
                            Latitude = 44.4664,
                            Longitude = 19.1736,
                            Naziv = "Bijeljina"
                        },
                        new
                        {
                            Id = 17,
                            Latitude = 43.828400000000002,
                            Longitude = 17.404299999999999,
                            Naziv = "Livno"
                        },
                        new
                        {
                            Id = 18,
                            Latitude = 43.769799999999996,
                            Longitude = 18.0578,
                            Naziv = "Konjic"
                        },
                        new
                        {
                            Id = 19,
                            Latitude = 44.124899999999997,
                            Longitude = 18.123200000000001,
                            Naziv = "Visoko"
                        },
                        new
                        {
                            Id = 20,
                            Latitude = 44.775199999999998,
                            Longitude = 17.192399999999999,
                            Naziv = "Doboj"
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.Korisnici", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("DatumKreiranja")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(320)
                        .IsUnicode(false)
                        .HasColumnType("varchar(320)");

                    b.Property<string>("Ime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.Property<string>("KorisnickoIme")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("LozinkaHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Prezime")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Korisnici", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumKreiranja = new DateTime(2025, 2, 6, 15, 7, 5, 413, DateTimeKind.Local).AddTicks(3068),
                            Email = "test@gmail.com",
                            Ime = "Test",
                            KorisnickoIme = "test",
                            LozinkaHash = "KaiUaS4zfaZiZnbuv7TN0r5OfeM=",
                            LozinkaSalt = "AglQFeC8HyIM/UV2yFOa0w==",
                            Prezime = "Korisnik"
                        },
                        new
                        {
                            Id = 2,
                            DatumKreiranja = new DateTime(2025, 2, 6, 15, 7, 5, 413, DateTimeKind.Local).AddTicks(3165),
                            Email = "admin@gmail.com",
                            Ime = "Admin",
                            KorisnickoIme = "admin",
                            LozinkaHash = "KaiUaS4zfaZiZnbuv7TN0r5OfeM=",
                            LozinkaSalt = "AglQFeC8HyIM/UV2yFOa0w==",
                            Prezime = "Korisnik"
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.KorisniciDostignuca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime");

                    b.Property<int>("DostignuceId")
                        .HasColumnType("int")
                        .HasColumnName("DostignuceId");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikId");

                    b.HasKey("Id");

                    b.HasIndex("DostignuceId");

                    b.HasIndex("KorisnikId");

                    b.ToTable("KorisniciDostignuca", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumKreiranja = new DateTime(2025, 2, 6, 15, 7, 5, 414, DateTimeKind.Local).AddTicks(3963),
                            DostignuceId = 1,
                            KorisnikId = 1
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.KorisniciUloge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("Id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int")
                        .HasColumnName("KorisnikId");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int")
                        .HasColumnName("UlogaId");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("UlogaId");

                    b.ToTable("KorisniciUloge", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 413, DateTimeKind.Local).AddTicks(9208),
                            KorisnikId = 1,
                            UlogaId = 1
                        },
                        new
                        {
                            Id = 2,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 413, DateTimeKind.Local).AddTicks(9256),
                            KorisnikId = 2,
                            UlogaId = 2
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.Kuponi", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("BrojIskoristivosti")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumPocetka")
                        .HasColumnType("datetime2");

                    b.Property<string>("Kod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("Popust")
                        .HasColumnType("float");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Kuponi");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            BrojIskoristivosti = 5,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6510),
                            DatumPocetka = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6514),
                            Kod = "TESTNI-KOD",
                            KorisnikId = 1,
                            Naziv = "Testni kod",
                            Popust = 0.10000000000000001,
                            StateMachine = "draft"
                        },
                        new
                        {
                            Id = 2,
                            BrojIskoristivosti = 10,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6522),
                            DatumPocetka = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6525),
                            Kod = "WELCOME",
                            KorisnikId = 1,
                            Naziv = "Popust dobrodošlice",
                            Popust = 0.5,
                            StateMachine = "active"
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.Obavjestenja", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Opis")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Podnaslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Obavjestenja");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6662),
                            DatumKreiranja = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6665),
                            DatumZavrsetka = new DateTime(2025, 2, 8, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6668),
                            KorisnikId = 2,
                            Naslov = "Ažuriranje pravila privatnosti",
                            Opis = "Ažurirali smo naša pravila privatnosti kako bi ti pružili veću transparentnost i kontrolu nad tvojim podacima. Pregledaj nove postavke privatnosti u aplikaciji i prilagodi ih svojim potrebama.",
                            Podnaslov = "Više kontrole nad tvojim podacima",
                            StateMachine = "active"
                        },
                        new
                        {
                            Id = 2,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6680),
                            DatumKreiranja = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6683),
                            DatumZavrsetka = new DateTime(2025, 2, 6, 17, 7, 5, 415, DateTimeKind.Local).AddTicks(6685),
                            KorisnikId = 2,
                            Naslov = "Stigli su novi alati za bolje iskustvo!",
                            Opis = "RideWithMe je bogatiji za nove funkcionalnosti! Sada možeš lakše planirati putovanja, pratiti svoje vožnje i komunicirati s vozačima direktno iz aplikacije. Ažuriraj aplikaciju i isprobaj nove mogućnosti!",
                            Podnaslov = "Otkrij nove funkcije aplikacije",
                            StateMachine = "active"
                        },
                        new
                        {
                            Id = 3,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6691),
                            DatumKreiranja = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6694),
                            DatumZavrsetka = new DateTime(2025, 2, 6, 20, 7, 5, 415, DateTimeKind.Local).AddTicks(6696),
                            KorisnikId = 2,
                            Naslov = "Poboljšana korisnička podrška",
                            Opis = "Uveli smo nove opcije podrške u aplikaciji, uključujući chat uživo i detaljniji centar za pomoć. Kontaktiraj nas jednostavno putem aplikacije za bilo kakva pitanja ili sugestije!",
                            Podnaslov = "Brže rješenje tvojih upita",
                            StateMachine = "active"
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.Reklame", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("NazivKampanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazivKlijenta")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SadrzajKampanje")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("Reklame");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Uloge", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Uloge", (string)null);

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Naziv = "Korisnik"
                        },
                        new
                        {
                            Id = 2,
                            Naziv = "Administrator"
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.Voznje", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Cijena")
                        .HasColumnType("float");

                    b.Property<DateTime?>("DatumVrijemePocetka")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumVrijemeZavrsetka")
                        .HasColumnType("datetime2");

                    b.Property<int?>("DogadjajId")
                        .HasColumnType("int");

                    b.Property<int>("GradDoId")
                        .HasColumnType("int");

                    b.Property<int>("GradOdId")
                        .HasColumnType("int");

                    b.Property<int?>("KlijentId")
                        .HasColumnType("int");

                    b.Property<int?>("KuponId")
                        .HasColumnType("int");

                    b.Property<string>("Napomena")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("Ocjena")
                        .HasColumnType("int");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VozacId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DogadjajId");

                    b.HasIndex("GradDoId");

                    b.HasIndex("GradOdId");

                    b.HasIndex("KlijentId");

                    b.HasIndex("KuponId");

                    b.HasIndex("VozacId");

                    b.ToTable("Voznje");
                });

            modelBuilder.Entity("ridewithme.Service.Database.VrstaZalbe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Naziv")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("KorisnikId");

                    b.ToTable("VrstaZalbe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6402),
                            KorisnikId = 1,
                            Naziv = "Na vožnju"
                        },
                        new
                        {
                            Id = 2,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6435),
                            KorisnikId = 1,
                            Naziv = "Na vozača"
                        },
                        new
                        {
                            Id = 3,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6440),
                            KorisnikId = 1,
                            Naziv = "Na aplikaciju"
                        },
                        new
                        {
                            Id = 4,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6444),
                            KorisnikId = 1,
                            Naziv = "Ostalo"
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.Zalbe", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AdministratorId")
                        .HasColumnType("int");

                    b.Property<DateTime>("DatumIzmjene")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("DatumKreiranja")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumPreuzimanja")
                        .HasColumnType("datetime2");

                    b.Property<int>("KorisnikId")
                        .HasColumnType("int");

                    b.Property<string>("Naslov")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("OdgovorNaZalbu")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("StateMachine")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VrstaZalbeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AdministratorId");

                    b.HasIndex("KorisnikId");

                    b.HasIndex("VrstaZalbeId");

                    b.ToTable("Zalbe");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6573),
                            DatumKreiranja = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6579),
                            KorisnikId = 1,
                            Naslov = "Problem prilikom prijave",
                            Sadrzaj = "Prilikom pokušaja prijave na aplikaciju, ne mogu da se prijavim iako unosim ispravne podatke.",
                            StateMachine = "active",
                            VrstaZalbeId = 3
                        },
                        new
                        {
                            Id = 2,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6587),
                            DatumKreiranja = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6589),
                            KorisnikId = 1,
                            Naslov = "Vozač ne uzvraća poruke",
                            Sadrzaj = "Potrebno je da dogovorim lokaciju polaska sa vozačem vožnje ID: 2 ali ne mogu da dobijem povratnu informaciju od vozača.",
                            StateMachine = "active",
                            VrstaZalbeId = 2
                        },
                        new
                        {
                            Id = 3,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6594),
                            DatumKreiranja = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6597),
                            KorisnikId = 1,
                            Naslov = "Vožnja nije bila do navedene lokacije",
                            Sadrzaj = "Vožnja je naznačena da je do Sarajeva, a vozili smo se do Kaknja, molim za povrat novca.",
                            StateMachine = "active",
                            VrstaZalbeId = 1
                        },
                        new
                        {
                            Id = 4,
                            DatumIzmjene = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6601),
                            DatumKreiranja = new DateTime(2025, 2, 6, 15, 7, 5, 415, DateTimeKind.Local).AddTicks(6603),
                            KorisnikId = 1,
                            Naslov = "Neiskoristiv kupon",
                            Sadrzaj = "Naznačeno je da koristimo kupon 'WELCOME', ali on ne radi.",
                            StateMachine = "active",
                            VrstaZalbeId = 4
                        });
                });

            modelBuilder.Entity("ridewithme.Service.Database.FAQ", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ridewithme.Service.Database.KorisniciDostignuca", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Dostignuca", "Dostignuce")
                        .WithMany("KorisniciDostignuca")
                        .HasForeignKey("DostignuceId")
                        .IsRequired()
                        .HasConstraintName("FK_KorisniciDostignuca_Dostignuca");

                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany("KorisniciDostignuca")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK_KorisniciDostignuca_Korisnici");

                    b.Navigation("Dostignuce");

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ridewithme.Service.Database.KorisniciUloge", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany("KorisniciUloge")
                        .HasForeignKey("KorisnikId")
                        .IsRequired()
                        .HasConstraintName("FK_KorisniciUloge_Korisnici");

                    b.HasOne("ridewithme.Service.Database.Uloge", "Uloga")
                        .WithMany("KorisniciUloge")
                        .HasForeignKey("UlogaId")
                        .IsRequired()
                        .HasConstraintName("FK_KorisniciUloge_Uloge");

                    b.Navigation("Korisnik");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Kuponi", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Obavjestenja", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Reklame", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Voznje", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Dogadjaji", "Dogadjaj")
                        .WithMany()
                        .HasForeignKey("DogadjajId");

                    b.HasOne("ridewithme.Service.Database.Gradovi", "GradDo")
                        .WithMany()
                        .HasForeignKey("GradDoId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ridewithme.Service.Database.Gradovi", "GradOd")
                        .WithMany()
                        .HasForeignKey("GradOdId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ridewithme.Service.Database.Korisnici", "Klijent")
                        .WithMany()
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ridewithme.Service.Database.Kuponi", "Kupon")
                        .WithMany()
                        .HasForeignKey("KuponId");

                    b.HasOne("ridewithme.Service.Database.Korisnici", "Vozac")
                        .WithMany()
                        .HasForeignKey("VozacId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Dogadjaj");

                    b.Navigation("GradDo");

                    b.Navigation("GradOd");

                    b.Navigation("Klijent");

                    b.Navigation("Kupon");

                    b.Navigation("Vozac");
                });

            modelBuilder.Entity("ridewithme.Service.Database.VrstaZalbe", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Korisnik");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Zalbe", b =>
                {
                    b.HasOne("ridewithme.Service.Database.Korisnici", "Administrator")
                        .WithMany()
                        .HasForeignKey("AdministratorId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("ridewithme.Service.Database.Korisnici", "Korisnik")
                        .WithMany()
                        .HasForeignKey("KorisnikId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("ridewithme.Service.Database.VrstaZalbe", "VrstaZalbe")
                        .WithMany()
                        .HasForeignKey("VrstaZalbeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Administrator");

                    b.Navigation("Korisnik");

                    b.Navigation("VrstaZalbe");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Dostignuca", b =>
                {
                    b.Navigation("KorisniciDostignuca");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Korisnici", b =>
                {
                    b.Navigation("KorisniciDostignuca");

                    b.Navigation("KorisniciUloge");
                });

            modelBuilder.Entity("ridewithme.Service.Database.Uloge", b =>
                {
                    b.Navigation("KorisniciUloge");
                });
#pragma warning restore 612, 618
        }
    }
}
